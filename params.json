{"name":"Eenie meenie","tagline":"For a member of a population, randomly chooses to which experimental group the member should be assigned.  Lots of configuration options.","body":"EenieMeenie\r\n========\r\n\r\n[![Gem Version](https://badge.fury.io/rb/eenie_meenie.png)](http://badge.fury.io/rb/eenie_meenie) [![Build Status](https://travis-ci.org/rthbound/eenie_meenie.png?branch=master)](https://travis-ci.org/rthbound/eenie_meenie) [![Coverage Status](https://coveralls.io/repos/rthbound/eenie_meenie/badge.png?branch=master)](https://coveralls.io/r/rthbound/eenie_meenie?branch=master) [![Code Climate](https://codeclimate.com/github/rthbound/eenie_meenie.png)](https://codeclimate.com/github/rthbound/eenie_meenie)\r\n\r\nDecides to which experimental group a member of a population should be assigned.\r\n\r\nInstallation\r\n------------\r\n\r\nEenieMeenie is a Ruby gem, and can be installed using `gem install eenie_meenie` or by adding the following to your application's Gemfile:\r\n\r\n    gem 'eenie_meenie', '0.1.1'\r\n\r\nUsage\r\n-----\r\n\r\nWhen using this gem, you'll be able to:\r\n\r\n1. Assign as a threshold a number somewhere in the range of (0,1] to each experimental group.\r\n2. Assign a threshold of \"DO NOT CARE\" to any group by passing `false` instead of a number.\r\n3. Tell it to which groups a member can be assigned.  Any group with a threshold should be included here (otherwise the threshold is pointless).\r\n4. Tell it how to scope the member class (tell it which study, if you're using one member class for all studies)\r\n5. Specify the population to be used when calculating whether a group's population threshold has been reached.\r\n\r\nExample Configurations\r\n----------------------\r\n\r\neenie_meenie users can specify the population\r\nusing the :members option, e.g.\r\n\r\n```ruby\r\nEenieMeenie::Assignment.new({\r\n  member:  @some_member,\r\n  members: MemberClass.where(something).joins(another),\r\n  groups:  [\"Experimental\", \"Control\"],\r\n  group_rules: {\r\n    \"Experimental\" => { threshold: 0.51 },\r\n    \"Control\"      => { threshold: 0.51 }\r\n  }\r\n})\r\n```\r\n\r\nOther examples ...\r\n\r\n```ruby\r\n# Control: Do not care  (chosen manually, if ever)\r\n# Experimental A: %50   (randomly assign)\r\n# Experimental B: %50   (randomly assign)\r\n\r\nEenieMeenie::Assignment.new({\r\n  groups: [\"Experimental A\", \"Experimental B\"],  # EenieMeenie's assignment options\r\n  member: @obj,                                  # Member of population\r\n  group_rules: {\r\n    \"Control\"        => { threshold: false },    # Don't care\r\n    \"Experimental A\" => { threshold: 0.5 },      # No more than 50%\r\n    \"Experimental B\" => { threshold: 0.5 }       # No more than 50%\r\n  },\r\n  class_rules: { organization_id: 1}             # Only consider members belonging to Organization 1\r\n}).execute!\r\n```\r\n\r\n```ruby\r\n# Control:        %33.3   (randomly assign)\r\n# Experimental A: %33.3   (randomly assign)\r\n# Experimental B: %33.3   (randomly assign)\r\n\r\nEenieMeenie::Assignment.new({\r\n  groups: [\"Control\", \"Experimental A\", \"Experimental B\"], # EenieMeenie's assignment options\r\n  member: @obj,                                            # Member of population\r\n  group_rules: {\r\n    \"Control\"         => { threshold: (1.0 / 3.0) },       # No more than one-third\r\n    \"Experimental A\"  => { threshold: (1.0 / 3.0) },       # No more than one-third\r\n    \"Experimental B\" => { threshold:  (1.0 / 3.0) }        # No more than one-third\r\n  },\r\n  class_rules: { organization_id: 1} # Only consider members belonging to Organization 1\r\n}).execute!\r\n```\r\n\r\n```ruby\r\n# Control:        %50         (randomly assign)\r\n# Experimental:   %50         (randomly assign)\r\n# Experimental A: Do not care (manually assign)\r\n# Experimental B: Do not care (manually assign)\r\n\r\n# If \"Control\" is too full, put them in \"Experimental\"          ...\r\n# Later someone will choose whether they're in \"Experimental A\" ...\r\n# or in \"Experimental B\"\r\n\r\nEenieMeenie::Assignment.new({\r\n  groups: [\"Control\", \"Experimental\"],       # EenieMeenie's assignment options\r\n  member: @obj,                              # Member of population\r\n  group_rules: {\r\n    \"Control\"        => { threshold: 0.5 },  # No more than one half\r\n    \"Experimental\"   => { threshold: 0.5 },  # No more than one half\r\n    \"Experimental A\" => { threshold: false } # Don't care\r\n    \"Experimental B\" => { threshold: false } # Don't care\r\n  }\r\n}).execute!\r\n```\r\n\r\n### Pull requests/issues\r\n\r\nUse GitHub's issue tracker to report problems or request changes. Pull Requests are encouraged. Don't forget to add tests for any changes you'd like merged.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}